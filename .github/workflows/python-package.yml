name: test

on:
  push:
#    branches: [ develop, master ]
  pull_request:
    branches: [ develop ]

env:
  FORCE_COLOR: 1

permissions: # Added based on common practice and example
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Adjusted timeout

    steps:
      - uses: actions/checkout@v4

      - name: Check repository best-practices
        uses: scientific-python/repo-review@v0.12.2
        with:
          plugins: sp-repo-review

      - name: Check for typos
        uses: crate-ci/typos@master

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true # Optional: activates the virtual environment globally for subsequent steps
          python-version: "3.12" # Or your desired Python version for linting

      - name: Run ruff linter and formatter
        run: |
          uv run ruff check --output-format=github .
          uv run ruff format --check .

  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Generate Matrix
        id: generate-matrix
        uses: coactions/dynamic-matrix@v3
        with:
          platforms: 'linux,macos,windows'
          min_python: '3.9'

  typetest:
    name: Type ${{matrix.os}} py${{ matrix.python_version }}
    needs: matrix
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 5 # Adjusted timeout

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv for Python ${{ matrix.python_version }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python_version }}

      - name: Ensure that everything is up to date
        run: >
          uv sync

      - name: Run pyright
        run: >
          uv run
          -p ${{ matrix.python_version }}
          --active
          --no-editable
          pyright

      - name: Run mypy
        run: >
          uv run
          -p ${{ matrix.python_version }}
          --active
          --no-editable
          mypy
          --cache-dir=/dev/null
          .

  # Run os specific tests on the slower OS X/Windows machines
#  windows_osx:
#    name: ${{ matrix.python-version }} on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: ['3.9', '3.10', '3.11', '3.12']
#        os: ['macos-latest', 'windows-latest']
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#          cache: 'pip'
#      - name: Python version
#        run: python --version
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip setuptools wheel
#          python -m pip install -e ".[tests]"
#      - name: Test with pytest
#        run: python -m pytest

  # Discover Tox environments and build the matrix

  # Run Python tests on Linux with Redis
  tests:
    name: Test ${{matrix.os}} py${{ matrix.python_version }}
    needs: matrix
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Start Redis
        uses: supercharge/redis-github-action@1.8.0
        # Redis does not support all operating systems so allow failure
        continue-on-error: true
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'
      - name: Python version
        run: python --version
      - name: Install dependencies
        run: |
          python -m pip install tox
      - name: Run tests with tox
        run: ${{ matrix.command }}

